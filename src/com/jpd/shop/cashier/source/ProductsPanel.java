package com.jpd.shop.cashier.source;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Shape;
import java.awt.geom.RoundRectangle2D;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JSpinner;
import javax.swing.JTextField;

import com.jpd.shop.common_files.Colors;
import com.jpd.shop.common_files.MainFrame;
import com.jpd.shop.common_files.ProductCard.ProductCard;
import com.jpd.shop.common_files.data_types.Client;
import com.jpd.shop.common_files.data_types.MyPanel_Interface;
import com.jpd.shop.common_files.data_types.NavButton;
import com.jpd.shop.common_files.data_types.ProductData;

public class ProductsPanel extends javax.swing.JPanel implements MyPanel_Interface {

    private static ProductsPanel productsPanel;

    public static ProductsPanel getInstance() {
        if (productsPanel == null) {
            productsPanel = new ProductsPanel() {
                @Override
                protected void test(MouseEvent e) {
                }
            };
        }
        return productsPanel;
    }

    public static boolean hasAnInstance() {
        return productsPanel != null;
    }

    private final FlowLayout LAYOUT = new FlowLayout(
            FlowLayout.LEFT, 20, 20);

    private ProductsPanel() {
        initComponents();
        loadProducts(Client.GET_BURGER_PRODUCTS);
    }

    @Override
    public void disposePanel() {
        if (productsPanel == null) {
            return;
        }

        productsPanel = null;
        ProductCard.changeSelectedCard(null);
    }

    private void loadProducts(int category) {

        if (PRODUCT_CARDS_CONTAINER.getComponents().length > 0) {
            PRODUCT_CARDS_CONTAINER.removeAll();

            ProductCard.changeSelectedCard(null);
        }

        ProductData[] products = null;
        Object object = Client.getInstance().makeARequestToServer(category);

        if (object instanceof ProductData[]) {
            products = (ProductData[]) object;
        } else {
            return;
        }

        for (ProductData productData : products) {

            ProductCard productCard = new ProductCard(productData) {
                @Override
                protected void cardClicked() {
                }// do nothing
            };

            productCard.getProductCardTemplate().addMouseListener(new MouseAdapter() {

                private boolean isProductInTray() {
                    for (Component component : TRAY_PRODUCTS_CONTAINER.getComponents()) {
                        if (productData.id() == ((TrayProductCard) component).PRODUCT_DATA.id()) {
                            return true;
                        }
                    }

                    // else
                    return false;
                }

                @Override
                public void mouseReleased(MouseEvent e) {

                    // add hin TrayProductCard if waray pa ini nga ProductCard ha tray
                    if (!isProductInTray()) {

                        TRAY_PRODUCTS_CONTAINER.add(new TrayProductCard(productData));

                        // TODO: add code
                    }
                }
            });

            PRODUCT_CARDS_CONTAINER.add(productCard);
        }

        // 225px it height hiton mga cards
        // 25px it vertical gap hiton cards???
        // 4 nga cards it na fit kada row
        int rows = (int) Math.ceil(products.length / 4.0);
        PRODUCT_CARDS_CONTAINER.setPreferredSize(new Dimension(
                SCROLL_PANE.getWidth(),
                (rows * 250)));
        PRODUCT_CARDS_CONTAINER.setLayout(LAYOUT);

        PRODUCT_CARDS_CONTAINER.revalidate();
        PRODUCT_CARDS_CONTAINER.repaint();

        SCROLL_PANE.revalidate();
        SCROLL_PANE.repaint();

        // displayProductDetails(products.length > 0
        // ? ProductCard.getSelectedCard().PRODUCT_DATA
        // : null);

        System.gc();
    }

    protected void test(MouseEvent evt) {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(1000, 530));
        setMinimumSize(new java.awt.Dimension(1000, 530));
        setPreferredSize(new java.awt.Dimension(1000, 530));
        setLayout(null);

        CATEGORY_PANEL.setBackground(Colors.WHITE);
        CATEGORY_PANEL.setPreferredSize(new java.awt.Dimension(50, 530));
        CATEGORY_PANEL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CATEGORY_PANELMouseExited(evt);
            }
        });
        //post-listener
        CATEGORY_PANEL.setLayout(new java.awt.GridBagLayout());
        GridBagConstraints constraints = new GridBagConstraints();

        constraints.insets = new Insets(5, 0, 5, 0);
        constraints.gridwidth = GridBagConstraints.REMAINDER;
        constraints.anchor = GridBagConstraints.CENTER;

        ImageIcon icon;
        ImageIcon blueIcon;
        NavButton button;

        // initialize burger button
        {
            icon = new ImageIcon(getClass().getResource(
                "/com/jpd/shop/common_files/icons/hamburger_button.png"));
        blueIcon = new ImageIcon(getClass().getResource(
            "/com/jpd/shop/common_files/icons/blue_hamburger_button.png"));
    button = new NavButton(icon, blueIcon, false);

    NavButton.changeLastClickedButton(button);

    button.setCursor(MainFrame.HAND_CURSOR);
    button.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseReleased(MouseEvent e) {
            loadProducts(Client.GET_BURGER_PRODUCTS);
        }
    });
    button.setVisible(true);
    CATEGORY_PANEL.add(button, constraints);
    }

    // initialize fries button
    {
        icon = new ImageIcon(getClass().getResource(
            "/com/jpd/shop/common_files/icons/fries_button.png"));
    blueIcon = new ImageIcon(getClass().getResource(
        "/com/jpd/shop/common_files/icons/blue_fries_button.png"));
button = new NavButton(icon, blueIcon, false);

button.setIcon(icon);
button.setCursor(MainFrame.HAND_CURSOR);
button.addMouseListener(new MouseAdapter() {
    @Override
    public void mouseReleased(MouseEvent e) {
        loadProducts(Client.GET_FRIES_PRODUCTS);
    }
    });
    button.setVisible(true);
    CATEGORY_PANEL.add(button, constraints);
    }

    // initialize drinks button
    {
        icon = new ImageIcon(getClass().getResource(
            "/com/jpd/shop/common_files/icons/drinks_button.png"));
    blueIcon = new ImageIcon(getClass().getResource(
        "/com/jpd/shop/common_files/icons/blue_drinks_button.png"));
button = new NavButton(icon, blueIcon, false);

button.setIcon(icon);
button.setCursor(MainFrame.HAND_CURSOR);
button.addMouseListener(new MouseAdapter() {
    @Override
    public void mouseReleased(MouseEvent e) {
        loadProducts(Client.GET_DRINKS_PRODUCTS);
    }
    });
    button.setVisible(true);
    CATEGORY_PANEL.add(button, constraints);
    }
    add(CATEGORY_PANEL);
    CATEGORY_PANEL.setBounds(0, 0, 50, 530);

    SCROLL_PANE.setBackground(new java.awt.Color(242, 242, 242));
    SCROLL_PANE.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
    SCROLL_PANE.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    SCROLL_PANE.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
    SCROLL_PANE.setMaximumSize(new java.awt.Dimension(700, 530));
    SCROLL_PANE.setMinimumSize(new java.awt.Dimension(700, 530));
    SCROLL_PANE.setPreferredSize(new java.awt.Dimension(700, 530));

    PRODUCT_CARDS_CONTAINER.setBackground(Colors.WHITE_BACKGROUND);
    SCROLL_PANE.setViewportView(PRODUCT_CARDS_CONTAINER);

    SCROLL_PANE.getVerticalScrollBar().setUnitIncrement(16);
    add(SCROLL_PANE);
    SCROLL_PANE.setBounds(50, 0, 700, 530);

    TRAY_SCROLL_PANE.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    TRAY_SCROLL_PANE.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
    TRAY_SCROLL_PANE.setMaximumSize(new java.awt.Dimension(250, 530));
    TRAY_SCROLL_PANE.setMinimumSize(new java.awt.Dimension(250, 530));
    TRAY_SCROLL_PANE.setPreferredSize(new java.awt.Dimension(250, 530));

    TRAY_PRODUCTS_CONTAINER.setMaximumSize(new java.awt.Dimension(250, 10000));
    TRAY_PRODUCTS_CONTAINER.setMinimumSize(new java.awt.Dimension(250, 1));
    TRAY_PRODUCTS_CONTAINER.setPreferredSize(new java.awt.Dimension(250, 1));
    TRAY_PRODUCTS_CONTAINER.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
    TRAY_SCROLL_PANE.setViewportView(TRAY_PRODUCTS_CONTAINER);

    TRAY_SCROLL_PANE.getVerticalScrollBar().setUnitIncrement(16);
    add(TRAY_SCROLL_PANE);
    TRAY_SCROLL_PANE.setBounds(750, 0, 250, 360);

    jLabel1.setBackground(new java.awt.Color(204, 255, 255));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("PLACE ORDER");
    jLabel1.setCursor(MainFrame.HAND_CURSOR);
    jLabel1.setMaximumSize(new java.awt.Dimension(200, 50));
    jLabel1.setMinimumSize(new java.awt.Dimension(200, 50));
    jLabel1.setOpaque(true);
    jLabel1.setPreferredSize(new java.awt.Dimension(200, 50));
    add(jLabel1);
    jLabel1.setBounds(770, 470, 210, 50);
    }// </editor-fold>//GEN-END:initComponents

    private void CATEGORY_PANELMouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_CATEGORY_PANELMouseExited
        // TODO add your handling code here:
    }// GEN-LAST:event_CATEGORY_PANELMouseExited

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JPanel CATEGORY_PANEL = new javax.swing.JPanel();
    private final javax.swing.JPanel PRODUCT_CARDS_CONTAINER = new javax.swing.JPanel();
    private final javax.swing.JScrollPane SCROLL_PANE = new javax.swing.JScrollPane();
    final javax.swing.JPanel TRAY_PRODUCTS_CONTAINER = new javax.swing.JPanel(){
        // 145 it height han TrayProductCard
        // 10 it vgap
        private Dimension dimension = new Dimension(this.getPreferredSize().width, 1);

        @Override
        public Component add(Component comp) {
            if (comp instanceof TrayProductCard) {
                super.add(comp);

                dimension = new Dimension(dimension.width, dimension.height + 145 + 10);

                this.setPreferredSize(dimension);

                this.revalidate();
                this.repaint();
                //            TRAY_SCROLL_PANE.revalidate();
                //            TRAY_SCROLL_PANE.repaint();

                System.gc();
            }

            return comp;
        }

        @Override
        public void remove(Component comp){
            super.remove(comp);

            dimension = new Dimension(dimension.width, dimension.height - 145 - 10);

            this.setPreferredSize(dimension);
            this.revalidate();
            this.repaint();
            System.gc();
        }
    };
    private final javax.swing.JScrollPane TRAY_SCROLL_PANE = new javax.swing.JScrollPane();
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
