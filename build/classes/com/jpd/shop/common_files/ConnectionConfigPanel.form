<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.5" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JPanelFormInfo">
  <Properties>
    <Property name="maximumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
      <Dimension value="[300, 225]"/>
    </Property>
    <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
      <Dimension value="[300, 225]"/>
    </Property>
  </Properties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,0,-31,0,0,1,44"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout">
    <Property name="useNullLayout" type="boolean" value="true"/>
  </Layout>
  <SubComponents>
    <Component class="javax.swing.JLabel" name="jLabel1">
      <Properties>
        <Property name="text" type="java.lang.String" value="IPv4 Address:"/>
        <Property name="maximumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 25]"/>
        </Property>
        <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 25]"/>
        </Property>
        <Property name="preferredSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 25]"/>
        </Property>
      </Properties>
      <AuxValues>
        <AuxValue name="JavaCodeGenerator_VariableLocal" type="java.lang.Boolean" value="true"/>
        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="0"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="50" y="25" width="-1" height="-1"/>
        </Constraint>
      </Constraints>
    </Component>
    <Component class="javax.swing.JTextField" name="ipv4AddressField">
      <Properties>
        <Property name="text" type="java.lang.String" value="127.0.0.1"/>
        <Property name="preferredSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 25]"/>
        </Property>
      </Properties>
      <AuxValues>
        <AuxValue name="JavaCodeGenerator_AddingCodePre" type="java.lang.String" value="((AbstractDocument) ipv4AddressField.getDocument()).setDocumentFilter(&#xd;&#xa;                new DocumentFilter() {&#xd;&#xa;&#xd;&#xa;                    Pattern pattern = Pattern.compile(&quot;^([0-9.]+)$&quot;);&#xd;&#xa;&#xd;&#xa;                    @Override&#xd;&#xa;                    public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr)&#xd;&#xa;                            throws BadLocationException {&#xd;&#xa;                        if (string == null) {&#xd;&#xa;                            return;&#xd;&#xa;                        }&#xd;&#xa;                        String currentText = fb.getDocument().getText(&#xd;&#xa;                                0, fb.getDocument().getLength());&#xd;&#xa;                        String newText = currentText.substring(0, offset)&#xd;&#xa;                                + string + currentText.substring(offset);&#xd;&#xa;                        if (isValidInput(newText)) {&#xd;&#xa;                            super.insertString(fb, offset, string, attr);&#xd;&#xa;                        }&#xd;&#xa;                    }&#xd;&#xa;&#xd;&#xa;                    @Override&#xd;&#xa;                    public void replace(FilterBypass fb, int offset, int length,&#xd;&#xa;                            String text, AttributeSet attrs)&#xd;&#xa;                            throws BadLocationException {&#xd;&#xa;                        if (text == null) {&#xd;&#xa;                            return;&#xd;&#xa;                        }&#xd;&#xa;                        String currentText = fb.getDocument().getText(&#xd;&#xa;                                0, fb.getDocument().getLength());&#xd;&#xa;                        String newText = currentText.substring(0, offset) + text&#xd;&#xa;                                + currentText.substring(offset + length);&#xd;&#xa;                        if (isValidInput(newText)) {&#xd;&#xa;                            super.replace(fb, offset, length, text, attrs);&#xd;&#xa;                        }&#xd;&#xa;                    }&#xd;&#xa;&#xd;&#xa;                    private boolean isValidInput(String text) {&#xd;&#xa;                        Matcher matcher = pattern.matcher(text);&#xd;&#xa;                        return matcher.matches();&#xd;&#xa;                    }&#xd;&#xa;                });"/>
        <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new javax.swing.JTextField(){&#xd;&#xa;    private Shape shape;&#xd;&#xa;    private final int RADIUS = 18;&#xd;&#xa;&#xd;&#xa;            @Override&#xd;&#xa;            protected void paintComponent(Graphics g) {&#xd;&#xa;                g.setColor(getBackground());&#xd;&#xa;                g.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, RADIUS, RADIUS);&#xd;&#xa;                super.paintComponent(g);&#xd;&#xa;            }&#xd;&#xa;&#xd;&#xa;            @Override&#xd;&#xa;            protected void paintBorder(Graphics g) {&#xd;&#xa;                g.setColor(getForeground());&#xd;&#xa;                g.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, RADIUS, RADIUS);&#xd;&#xa;            }&#xd;&#xa;&#xd;&#xa;            @Override&#xd;&#xa;            public boolean contains(int x, int y) {&#xd;&#xa;                if (shape == null || !shape.getBounds().equals(getBounds())) {&#xd;&#xa;                    shape = new RoundRectangle2D.Float(0, 0,&#xd;&#xa;                            getWidth() - 1, getHeight() - 1, RADIUS, RADIUS);&#xd;&#xa;                }&#xd;&#xa;                return shape.contains(x, y);&#xd;&#xa;            }&#xd;&#xa;}"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="50" y="50" width="-1" height="-1"/>
        </Constraint>
      </Constraints>
    </Component>
    <Component class="javax.swing.JLabel" name="jLabel2">
      <Properties>
        <Property name="text" type="java.lang.String" value="Port:"/>
        <Property name="maximumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 25]"/>
        </Property>
        <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 25]"/>
        </Property>
        <Property name="preferredSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 25]"/>
        </Property>
      </Properties>
      <AuxValues>
        <AuxValue name="JavaCodeGenerator_VariableLocal" type="java.lang.Boolean" value="true"/>
        <AuxValue name="JavaCodeGenerator_VariableModifier" type="java.lang.Integer" value="0"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="50" y="85" width="-1" height="-1"/>
        </Constraint>
      </Constraints>
    </Component>
    <Component class="javax.swing.JTextField" name="portNumField">
      <Properties>
        <Property name="text" type="java.lang.String" value="55555"/>
        <Property name="maximumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 25]"/>
        </Property>
        <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 25]"/>
        </Property>
        <Property name="preferredSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 25]"/>
        </Property>
      </Properties>
      <AuxValues>
        <AuxValue name="JavaCodeGenerator_AddingCodePre" type="java.lang.String" value="((AbstractDocument) portNumField.getDocument()).setDocumentFilter(&#xd;&#xa;                new DocumentFilter() {&#xd;&#xa;                    @Override&#xd;&#xa;                    public void insertString(FilterBypass fb, int offset,&#xd;&#xa;                            String string, AttributeSet attr) throws BadLocationException {&#xd;&#xa;&#xd;&#xa;                        if (string == null) {&#xd;&#xa;                            return;&#xd;&#xa;                        }&#xd;&#xa;                        if (isValidInput(string)) {&#xd;&#xa;                            super.insertString(fb, offset, string, attr);&#xd;&#xa;                        }&#xd;&#xa;                    }&#xd;&#xa;&#xd;&#xa;                    @Override&#xd;&#xa;                    public void replace(FilterBypass fb, int offset, int length,&#xd;&#xa;                            String text, AttributeSet attrs) throws BadLocationException {&#xd;&#xa;&#xd;&#xa;                        if (text == null) {&#xd;&#xa;                            return;&#xd;&#xa;                        }&#xd;&#xa;                        if (isValidInput(text)) {&#xd;&#xa;                            super.replace(fb, offset, length, text, attrs);&#xd;&#xa;                        }&#xd;&#xa;                    }&#xd;&#xa;&#xd;&#xa;                    private boolean isValidInput(String text) {&#xd;&#xa;                        // Use a regular expression to check if the input is a valid integer&#xd;&#xa;                        return text.matches(&quot;^[0-9]+$&quot;);&#xd;&#xa;                    }&#xd;&#xa;                });"/>
        <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new javax.swing.JTextField(){&#xd;&#xa;    private Shape shape;&#xd;&#xa;    private final int RADIUS = 18;&#xd;&#xa;&#xd;&#xa;            @Override&#xd;&#xa;            protected void paintComponent(Graphics g) {&#xd;&#xa;                g.setColor(getBackground());&#xd;&#xa;                g.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, RADIUS, RADIUS);&#xd;&#xa;                super.paintComponent(g);&#xd;&#xa;            }&#xd;&#xa;&#xd;&#xa;            @Override&#xd;&#xa;            protected void paintBorder(Graphics g) {&#xd;&#xa;                g.setColor(getForeground());&#xd;&#xa;                g.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, RADIUS, RADIUS);&#xd;&#xa;            }&#xd;&#xa;&#xd;&#xa;            @Override&#xd;&#xa;            public boolean contains(int x, int y) {&#xd;&#xa;                if (shape == null || !shape.getBounds().equals(getBounds())) {&#xd;&#xa;                    shape = new RoundRectangle2D.Float(0, 0,&#xd;&#xa;                            getWidth() - 1, getHeight() - 1, RADIUS, RADIUS);&#xd;&#xa;                }&#xd;&#xa;                return shape.contains(x, y);&#xd;&#xa;            }&#xd;&#xa;}"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="50" y="110" width="-1" height="-1"/>
        </Constraint>
      </Constraints>
    </Component>
    <Component class="javax.swing.JLabel" name="button">
      <Properties>
        <Property name="background" type="java.awt.Color" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
          <Connection code="Colors.WHITE" type="code"/>
        </Property>
        <Property name="horizontalAlignment" type="int" value="0"/>
        <Property name="text" type="java.lang.String" value="Connect"/>
        <Property name="maximumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 50]"/>
        </Property>
        <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 50]"/>
        </Property>
        <Property name="opaque" type="boolean" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
          <Connection code="false" type="code"/>
        </Property>
        <Property name="preferredSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
          <Dimension value="[200, 50]"/>
        </Property>
      </Properties>
      <Events>
        <EventHandler event="mouseEntered" listener="java.awt.event.MouseListener" parameters="java.awt.event.MouseEvent" handler="buttonMouseEntered"/>
        <EventHandler event="mouseExited" listener="java.awt.event.MouseListener" parameters="java.awt.event.MouseEvent" handler="buttonMouseExited"/>
        <EventHandler event="mousePressed" listener="java.awt.event.MouseListener" parameters="java.awt.event.MouseEvent" handler="buttonMousePressed"/>
        <EventHandler event="mouseReleased" listener="java.awt.event.MouseListener" parameters="java.awt.event.MouseEvent" handler="buttonMouseReleased"/>
      </Events>
      <AuxValues>
        <AuxValue name="JavaCodeGenerator_CreateCodeCustom" type="java.lang.String" value="new javax.swing.JLabel() {&#xd;&#xa;            final int RADIUS = 18;&#xd;&#xa;            Shape shape;&#xd;&#xa;&#xd;&#xa;            @Override&#xd;&#xa;            protected void paintComponent(Graphics g) {&#xd;&#xa;                g.setColor(getBackground());&#xd;&#xa;                g.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, RADIUS, RADIUS);&#xd;&#xa;                super.paintComponent(g);&#xd;&#xa;            }&#xd;&#xa;&#xd;&#xa;            @Override&#xd;&#xa;            protected void paintBorder(Graphics g) {&#xd;&#xa;                g.setColor(getForeground());&#xd;&#xa;                g.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, RADIUS, RADIUS);&#xd;&#xa;            }&#xd;&#xa;&#xd;&#xa;            @Override&#xd;&#xa;            public boolean contains(int x, int y) {&#xd;&#xa;                if (shape == null || !shape.getBounds().equals(getBounds())) {&#xd;&#xa;                    shape = new RoundRectangle2D.Float(0, 0, getWidth() - 1, getHeight() - 1, RADIUS, RADIUS);&#xd;&#xa;                }&#xd;&#xa;                return shape.contains(x, y);&#xd;&#xa;            }&#xd;&#xa;        }"/>
      </AuxValues>
      <Constraints>
        <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout" value="org.netbeans.modules.form.compat2.layouts.DesignAbsoluteLayout$AbsoluteConstraintsDescription">
          <AbsoluteConstraints x="50" y="150" width="-1" height="-1"/>
        </Constraint>
      </Constraints>
    </Component>
  </SubComponents>
</Form>
